
当前类加载器

每个类都会使用自己的类加载器（即加载自身的类加载器）区加载其他类（指的是所依赖的类）
如果claxxX 引用了 classY,那么classX的类加载器就会去加载classY(前提是classY尚未被加载)




线程上下文类加载器
线程上下文类加载器从jdk1.2开始引入，类Thread中的getContextClassLoader()
与setContextClassLoader(ClassLoader cl) 分别用来获取和设置上下文类加载器

如果没有通过setContextClassLoader 进行设置的话，线程将继承其父线程的上下文
类加载器。java 应用运行时的初始线程的上下文类加载器是 系统类加载器。
在线程中运行的代码可以通过该类加载器来加载类与资源

线程上下文类加载器的重要性
SPI（service provider interface） 
父ClassLoader可以使用当前线程Thread.currentThread().getContextCLassLoader()
所指定的ClassLoader加载的类，这就改变了父ClassLoader不能使用子ClassLoader
或是其他没有直接父子关系的ClassLoader加载的类的情况，即改变了双亲委托模型。


线程上下文类加载器就是当前线程的current classloader。

在双亲委托模型下，类加载是由下至上的，即下层的类加载器会委托上层进行加载。
但是对于spi来说，有些接口是java核心库所提供的，而java 核心库是由启动类加载器来
加载的，而这些接口的实现却来自于不同的jar包（厂商提供），
java的启动类加载器是不会加载其他来源的jar包，这样传统的双亲委托模型
就无法满足spi的要求。而通过给当前线程设置上下文类加载器，就可以由设置的
上下文类加载器来实现对于接口实现类的加载。   


















